""""""""""""""""""""""
" dotvim
" Odin Ugedal <odin@ugedal.com>
"
" Simple vimconfig
""""""""""""""""""""""

"
" Plug <3
"
call plug#begin('~/.vim/plugged')

" Boooring functions
function! DoRemote(arg)
    UpdateRemotePlugins
endfunction

" GPG enc support
Plug 'jamessan/vim-gnupg'

" Better undo support
Plug 'mbbill/undotree'

" Language spesific stuff
Plug 'fatih/vim-go'
Plug 'plasticboy/vim-markdown'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'hail2u/vim-css3-syntax'
Plug 'jstemmer/gotags'
Plug 'pangloss/vim-javascript'
Plug 'vim-latex/vim-latex'
Plug 'xuhdev/vim-latex-live-preview'
Plug 'shime/vim-livedown'


" Fuzzy searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Notes
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'

" Tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'

" Remember last place
Plug 'dietsche/vim-lastplace'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'peterhurford/send.vim'

" UI
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'mhinz/vim-startify'

" Colorschemes
Plug 'NLKNguyen/papercolor-theme'

" Other tools
Plug 'ervandew/supertab'
Plug 'tpope/vim-surround'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-repeat'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'svermeulen/vim-easyclip'
Plug 'terryma/vim-smooth-scroll'
Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'
Plug 'godlygeek/tabular'

" Autocomplete
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'zchee/deoplete-clang'
Plug 'carlitux/deoplete-ternjs'

" ALE - Linting
Plug 'w0rp/ale'

call plug#end()

"
" UI 
"

" Enable syntax
syntax on

" Enable wrapscan
set wrapscan

" Enable better searching
set ignorecase
set smartcase
set incsearch
set hlsearch

set magic

set showmatch

" Enable line numbers
set relativenumber number

" Make indenting awesome
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab

set encoding=utf8

filetype plugin indent on

set undofile
set undodir=~/.VIM_UNDO_FILES

" Fix wrapping
set whichwrap+=<,>,h,l,[,]

set backspace=indent,eol,start
set scrolloff=7

" Enable folding
set foldmethod=indent
set foldnestmax=1
set foldlevelstart=99
"
" UI
"
set background=dark
silent! colorscheme PaperColor
hi Normal ctermbg=NONE ctermfg=254
hi Search ctermbg=LightBlue
hi CursorLineNr ctermfg=4
hi EndOfBuffer ctermfg=12

function Toggle_background()
    if &background ==# 'dark'
        set background=light
        colo PaperColor
    else
        set background=dark
        hi Normal ctermbg=NONE
    endif
    echom 'Background was changed'
endfunction 

" hi current line
set cursorline

"
" Mapping
"
let g:mapleader = ','
nnoremap <leader><space>      :noh<CR>
nnoremap <leader>p            :FZF<CR>
nnoremap <leader>f            :FZF<CR>
nnoremap <leader>u            :UndotreeToggle<CR>
nnoremap <leader>m            :LivedownPreview<CR>
nnoremap <leader>e            :NERDTreeToggle<CR>
nnoremap <Leader>a            :Ag<CR>
nnoremap <Leader>c            :call Toggle_background()<CR>
nnoremap <Leader>t            :TagbarToggle<CR>
nnoremap <Leader>b            :Buffers<CR>
nnoremap <Leader>g            :GitFiles<CR>
map      <Leader><Leader>     <Plug>(easymotion-prefix)

" Move current line / visual line selection up or down.
nnoremap <leader>j :m+<CR>==
nnoremap <leader>k :m-2<CR>==
vnoremap <leader>j :m'>+<CR>gv=gv
vnoremap <leader>k :m-2<CR>gv=gv

nnoremap Q @q

" w!! will allow you to save using sudo
cnoremap w!! w !sudo tee > /dev/null %

" Map arrowkeys
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>

" Real shifting in visual mode
vnoremap < <gv
vnoremap > >gv

" Mapping for folding
nnoremap <space> za
vnoremap <space> zf

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" smooooooth scroll!
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

"
" Plugin settings
" 

" Gitgutter
let g:gitgutter_sign_column_always = 1

" Set laststatus to two, to enable lightline
set laststatus=2

" Dont autostart markdown composer
let g:markdown_composer_autostart=0

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#clang#libclang_path='/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header='/usr/include/clang/'

let g:markdown_enable_spell_checking = 0

let g:SignatureMarkerTextHLDynamic = 1
let g:SignatureMarkerTextHL = 1

" Fix bug in neovim, not allowing <C-h>
nnoremap <silent> <BS> :TmuxNavigateLeft<cr>

" Tagbar
let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }

au FileType javascript.jsx setlocal sw=2 sts=2 et

fun! s:scroll()
    let l:save = &scrolloff

    set scrolloff=0 noscrollbind nowrap nofoldenable
    botright vsplit

    normal L
    normal j
    normal zt

    setlocal scrollbind
    exe "normal \<c-w>p"
    setlocal scrollbind

    let &scrolloff = l:save
endfun
command! Scroll call s:scroll()

" Share yank across all sessions!!
let g:EasyClipShareYanks = 1

" Ale config
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_statusline_format = ['%d error(s)', '(%d)', 'OK']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
hi ALEErrorSign ctermfg=1 ctermbg=0
hi ALEwarningSign ctermfg=3 ctermbg=0

" Cursor shape in Nvim
let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1

" Startify theme
highlight StartifyBracket ctermfg=4
highlight StartifyFooter  ctermfg=8
highlight StartifyHeader  ctermfg=8
highlight StartifyNumber  ctermfg=5
highlight StartifySection ctermfg=148
highlight StartifyPath    ctermfg=7
highlight StartifyFile    ctermfg=37 cterm=bold
highlight StartifySlash   ctermfg=208
highlight StartifySpecial ctermfg=12

let g:startify_bookmarks = [ {'c': '~/.vimrc'}, '~/.zshrc' ]

let g:startify_custom_header = [
            \ '                                                                        ',
            \ '                                                                        ',
            \ '        __  __     ______     ______     _____     ______     __        ',
            \ '       /\ \/\ \   /\  ___\   /\  ___\   /\  __-.  /\  __ \   /\ \       ',
            \ '       \ \ \_\ \  \ \ \__ \  \ \  __\   \ \ \/\ \ \ \  __ \  \ \ \____  ',
            \ '        \ \_____\  \ \_____\  \ \_____\  \ \____-  \ \_\ \_\  \ \_____\ ',
            \ '         \/_____/   \/_____/   \/_____/   \/____/   \/_/\/_/   \/_____/ ',
            \ '                                  __                                    ',
            \ '                          __  __ /\_\    ___ ___                        ',
            \ '                         /\ \/\ \\/\ \ /'' __` __`\                     ',
            \ '                   (NEO) \ \ \_/ |\ \ \/\ \/\ \/\ \                     ',
            \ '                          \ \___/  \ \_\ \_\ \_\ \_\                    ',
            \ '                           \/__/    \/_/\/_/\/_/\/_/                    ',
            \ ]                          

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode'],['filename', 'modified'], ['ALE', 'paste' ]]
      \ },
      \ 'component': {
      \   'ALE': '%{ALEGetStatusLine()}',
      \ }
      \ }
