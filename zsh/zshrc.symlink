# utf-8
export LC_ALL="en_US.UTF-8"

# export Dirs
export DOTFILES=$(dirname $(dirname $(readlink -nf ~/.zshrc)))
export ZSH=$DOTFILES

# antigen - Plugins
source $HOME/.antigen.zsh

antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle robertzk/send.zsh
antigen bundle mollifier/cd-gitroot
antigen bundle caarlos0/git-add-remote
antigen bundle paulirish/git-open

# Fix TERM
if [ "$TERM" = "xterm" ]; then
    export TERM="xterm-256color"
fi
if [ "$TERM" = "screen-256color" ]; then
    # Awesome
else
    echo "GEET INNNTOOO TMUX"
fi

export PATH=$PATH:$DOTFILES/bin

# your project folder that we can `c [tab]` to
export PROJECTS=~/src


# use .localrc for super secret things
if [[ -a ~/.localrc ]]; then source ~/.localrc; fi

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit
for config_file ($ZSH/**/completion.sh) source $config_file

fpath=( "$HOME/.config/zfunctions" $fpath )

# Prompt theme
autoload -U promptinit && promptinit
prompt pure

source /usr/share/doc/pkgfile/command-not-found.zsh 2>/dev/null

# quote pasted URLs
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# Vi-mode on <ESC>, with awesome text support
# See vim-mode.zsh

# Tmux ssh stuff
[[ "$SSH_CONNECTION" != '' ]] && tmux source-file ~/.tmux.conf.ssh >/dev/null 2>/dev/null

# fix golang path
export GOPATH=$HOME/src/golang
export PATH=$PATH:$GOPATH/bin

# Start the gpg-agent if not already running
if ! pgrep -x -u "${USER}" gpg-agent >/dev/null 2>&1; then
  gpg-connect-agent /bye >/dev/null 2>&1
fi

# Set SSH to use gpg-agent
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="/run/user/${GID}/gnupg/S.gpg-agent.ssh"
fi

# FZF is Awesome!
# CTRL + R for command log 
# PS: fzf installed with vim,
# else, Goooooogle FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Ruby gems
if (( $+commands[ruby] )) ; then
    PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
fi

autoload -U history-search-end

zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end


export NODE_ENV=development

unsetopt extendedglob

# Private stuff
[ -f ~/.zshrc.priv ] && source ~/.zshrc.priv

# source every .zsh file in this rep
for config_file ($ZSH/**/*.zsh) source $config_file

bindkey -v
KEYTIMEOUT=1 # Fix the delay
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
    for c in {a,i}{\',\",\`}; do
        bindkey -M $m $c select-quoted
    done
done
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
bindkey '^G' what-cursor-position

# Clipboard support
[[ -n $DISPLAY ]] && (( $+commands[xclip] )) && {

  function cutbuffer() {
    zle .$WIDGET
    echo $CUTBUFFER | xclip -selection clipboard
    echo $CUTBUFFER | xclip
  }

  zle_cut_widgets=(
    vi-backward-delete-char
    vi-change
    vi-change-eol
    vi-change-whole-line
    vi-delete
    vi-delete-char
    vi-kill-eol
    vi-substitute
    vi-yank
    vi-yank-eol
  )
  for widget in $zle_cut_widgets
  do
    zle -N $widget cutbuffer
  done

  function putbuffer() {
    zle copy-region-as-kill "$(xclip -o)"
    zle .$WIDGET
  }

  zle_put_widgets=(
    vi-put-after
    vi-put-before
  )
  for widget in $zle_put_widgets
  do
    zle -N $widget putbuffer
  done
}


vi-lowercase() {
  local save_cut="$CUTBUFFER" save_cur="$CURSOR"
  zle .vi-change || return
  zle .vi-cmd-mode
  CUTBUFFER="${CUTBUFFER:l}"
  zle .vi-put-after -n 1
  CUTBUFFER="$save_cut" CURSOR="$save_cur"
}

vi-uppercase() {
  local save_cut="$CUTBUFFER" save_cur="$CURSOR"
  zle .vi-change || return
  zle .vi-cmd-mode
  CUTBUFFER="${CUTBUFFER:u}"
  zle .vi-put-after -n 1
  CUTBUFFER="$save_cut" CURSOR="$save_cur"
}

zle -N vi-lowercase
zle -N vi-uppercase

bindkey -a 'gU' vi-uppercase
bindkey -a 'gu' vi-lowercase
bindkey -M visual 'u' vi-lowercase
bindkey -M visual 'U' vi-uppercase

zle-keymap-select () {
    if [ "$TERM" = "screen-256color" ]; then
        if [ $KEYMAP = vicmd ]; then
            # the command mode for vi
            echo -ne "\e[2 q"
        else
            # the insert mode for vi
            echo -ne "\e[6 q"
        fi
    fi
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
zle -N zle-keymap-select
zle -N zle-line-init zle-keymap-select
echo -ne "\e[6 q"


bindkey "\e[A" history-beginning-search-backward-end
bindkey "\e[B" history-beginning-search-forward-end
